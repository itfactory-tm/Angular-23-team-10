// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TripPlannerAPI.Data;

#nullable disable

namespace TripPlanner.DAL.Migrations
{
    [DbContext(typeof(TripContext))]
    partial class TripContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CategoryTrip", b =>
                {
                    b.Property<int>("CategoriesCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("TripsTripID")
                        .HasColumnType("int");

                    b.HasKey("CategoriesCategoryID", "TripsTripID");

                    b.HasIndex("TripsTripID");

                    b.ToTable("CategoryTrip");
                });

            modelBuilder.Entity("KeywordTrip", b =>
                {
                    b.Property<int>("KeywordsKeywordID")
                        .HasColumnType("int");

                    b.Property<int>("TripsTripID")
                        .HasColumnType("int");

                    b.HasKey("KeywordsKeywordID", "TripsTripID");

                    b.HasIndex("TripsTripID");

                    b.ToTable("KeywordTrip");
                });

            modelBuilder.Entity("TripPlanner.DAL.Models.Activity", b =>
                {
                    b.Property<int>("ActivityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActivityID");

                    b.ToTable("Activity", (string)null);
                });

            modelBuilder.Entity("TripPlanner.DAL.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("TripPlanner.DAL.Models.Keyword", b =>
                {
                    b.Property<int>("KeywordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KeywordID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KeywordID");

                    b.ToTable("Keyword", (string)null);
                });

            modelBuilder.Entity("TripPlanner.DAL.Models.Trip", b =>
                {
                    b.Property<int>("TripID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TripID"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsShared")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Picture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TripID");

                    b.ToTable("Trip", (string)null);
                });

            modelBuilder.Entity("TripPlanner.DAL.Models.TripActivity", b =>
                {
                    b.Property<int>("TripActivityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TripActivityID"), 1L, 1);

                    b.Property<int?>("ActivityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TripID")
                        .HasColumnType("int");

                    b.HasKey("TripActivityID");

                    b.HasIndex("ActivityID");

                    b.HasIndex("TripID");

                    b.ToTable("TripActivity", (string)null);
                });

            modelBuilder.Entity("TripPlanner.DAL.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("TripUser", b =>
                {
                    b.Property<int>("TripsTripID")
                        .HasColumnType("int");

                    b.Property<int>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("TripsTripID", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("TripUser");
                });

            modelBuilder.Entity("CategoryTrip", b =>
                {
                    b.HasOne("TripPlanner.DAL.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripPlanner.DAL.Models.Trip", null)
                        .WithMany()
                        .HasForeignKey("TripsTripID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KeywordTrip", b =>
                {
                    b.HasOne("TripPlanner.DAL.Models.Keyword", null)
                        .WithMany()
                        .HasForeignKey("KeywordsKeywordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripPlanner.DAL.Models.Trip", null)
                        .WithMany()
                        .HasForeignKey("TripsTripID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TripPlanner.DAL.Models.TripActivity", b =>
                {
                    b.HasOne("TripPlanner.DAL.Models.Activity", null)
                        .WithMany("TripActivities")
                        .HasForeignKey("ActivityID");

                    b.HasOne("TripPlanner.DAL.Models.Trip", null)
                        .WithMany("TripActivities")
                        .HasForeignKey("TripID");
                });

            modelBuilder.Entity("TripUser", b =>
                {
                    b.HasOne("TripPlanner.DAL.Models.Trip", null)
                        .WithMany()
                        .HasForeignKey("TripsTripID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripPlanner.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TripPlanner.DAL.Models.Activity", b =>
                {
                    b.Navigation("TripActivities");
                });

            modelBuilder.Entity("TripPlanner.DAL.Models.Trip", b =>
                {
                    b.Navigation("TripActivities");
                });
#pragma warning restore 612, 618
        }
    }
}
